name: Deploy Factory App to EC2 via Docker Hub

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
  
  FRONTEND_IMAGE_NAME: arims0522/factory-frontend
  BACKEND_IMAGE_NAME: arims0522/factory-backend
  
  # AWS 정보
  AWS_REGION: ap-northeast-2
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
  EC2_USERNAME: ec2-user
  EC2_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
  
  # Private 인스턴스 정보 (고정 Private IP)
  MASTER_HOST: 10.0.2.224
  SLAVE_HOST: 10.0.12.124

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_HUB_USERNAME }}
        password: ${{ env.DOCKER_HUB_TOKEN }}
        
    - name: Build and Push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: frontend  # 멀티스테이지 타겟 지정
        push: true
        tags: |
          ${{ env.FRONTEND_IMAGE_NAME }}:latest
          ${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
          
    - name: Build and Push Backend Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: backend   # 멀티스테이지 타겟 지정
        push: true
        tags: |
          ${{ env.BACKEND_IMAGE_NAME }}:latest
          ${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Get Bastion Host IP and Deploy
      run: |
        # AWS CLI로 Bastion Host의 현재 Public IP 가져오기
        BASTION_IP=$(aws ec2 describe-instances \
          --instance-ids ${{ env.EC2_INSTANCE_ID }} \
          --region ${{ env.AWS_REGION }} \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        echo "Current Bastion Host IP: $BASTION_IP"
        
        # SSH로 배포 실행
        echo "${{ env.EC2_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ env.EC2_USERNAME }}@$BASTION_IP << 'BASTION_COMMANDS'
          echo "=== Connecting to Master Instance ==="
          ssh -i "factory-pem-key.pem" -o StrictHostKeyChecking=no ec2-user@${{ env.MASTER_HOST }} << 'MASTER_COMMANDS'
            
            echo "--- Creating deployment directory ---"
            mkdir -p /home/ec2-user/factory-app
            cd /home/ec2-user/factory-app
            
            echo "--- Creating docker-compose.yml ---"
            cat > docker-compose.yml << 'COMPOSE_EOF'
          version: '3.8'
          
          services:
            backend:
              image: ${{ env.BACKEND_IMAGE_NAME }}:latest
              container_name: factory-backend
              ports:
                - "8080:8080"
              environment:
                - SPRING_PROFILES_ACTIVE=production
              networks:
                - factory-network
              restart: unless-stopped
              
            frontend:
              image: ${{ env.FRONTEND_IMAGE_NAME }}:latest
              container_name: factory-frontend
              ports:
                - "3000:80"
              depends_on:
                - backend
              networks:
                - factory-network
              restart: unless-stopped
              
          networks:
            factory-network:
              driver: bridge
          COMPOSE_EOF
            
            echo "--- Pulling latest images ---"
            docker-compose pull
            
            echo "--- Stopping existing containers ---"
            docker-compose down || true
            
            echo "--- Starting new containers ---"
            docker-compose up -d
            
            echo "--- Cleaning up unused images ---"
            docker system prune -f
            
            echo "--- Checking container status ---"
            docker-compose ps
            
            echo "--- Testing services ---"
            sleep 30
            curl -f http://localhost:3000 > /dev/null && echo "✅ Frontend OK" || echo "❌ Frontend Failed"
            curl -f http://localhost:8080 > /dev/null && echo "✅ Backend OK" || echo "❌ Backend Failed"
            
          MASTER_COMMANDS
        BASTION_COMMANDS
        
        # 키 파일 삭제
        rm private_key.pem

    # ------------------------ slave (ec2요금 문제로 배포대상에서 제외)--------------------------
          
    # - name: Deploy to EC2 Slave Instance
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ env.EC2_HOST }}
    #     username: ${{ env.EC2_USERNAME }}
    #     key: ${{ env.EC2_KEY }}
    #     port: 22
    #     script: |
    #       echo "=== Connecting to Slave Instance ==="
    #       ssh -i "factory-pem-key.pem" ec2-user@${{ env.SLAVE_HOST }} << 'SLAVE_COMMANDS'
    #         
    #         echo "--- Creating deployment directory ---"
    #         mkdir -p /home/ec2-user/factory-app
    #         cd /home/ec2-user/factory-app
    #         
    #         echo "--- Creating docker-compose.yml ---"
    #         cat > docker-compose.yml << 'COMPOSE_EOF'
    #       version: '3.8'
    #       
    #       services:
    #         backend:
    #           image: ${{ env.BACKEND_IMAGE_NAME }}:latest
    #           container_name: factory-backend
    #           ports:
    #             - "8080:8080"
    #           environment:
    #             - SPRING_PROFILES_ACTIVE=production
    #           networks:
    #             - factory-network
    #           restart: unless-stopped
    #           
    #         frontend:
    #           image: ${{ env.FRONTEND_IMAGE_NAME }}:latest
    #           container_name: factory-frontend
    #           ports:
    #             - "3000:80"
    #           depends_on:
    #             - backend
    #           networks:
    #             - factory-network
    #           restart: unless-stopped
    #           
    #       networks:
    #         factory-network:
    #           driver: bridge
    #       COMPOSE_EOF
    #         
    #         echo "--- Pulling latest images ---"
    #         docker-compose pull
    #         
    #         echo "--- Stopping existing containers ---"
    #         docker-compose down || true
    #         
    #         echo "--- Starting new containers ---"
    #         docker-compose up -d
    #         
    #         echo "--- Cleaning up unused images ---"
    #         docker system prune -f
    #         
    #         echo "--- Checking container status ---"
    #         docker-compose ps
    #         
    #       SLAVE_COMMANDS
